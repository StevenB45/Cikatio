generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String               @id @default(cuid())
  firstName                   String
  lastName                    String
  email                       String               @unique
  phone                       String?
  address                     String?
  isAdmin                     Boolean              @default(false)
  hashedPassword              String?
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  dateOfBirth                 DateTime?
  departmentCode              String?
  departmentName              String?
  reservations                Item[]               @relation("ItemReservedBy")
  loans                       Loan[]
  loanHistoryPerformed        LoanHistory[]        @relation("LoanHistoryPerformer")
  loanHistory                 LoanHistory[]        @relation("LoanHistoryUser")
  passwordTokens              PasswordToken[]
  userReservations            Reservation[]
  reservationHistoryPerformed ReservationHistory[] @relation("ReservationHistoryPerformer")
  reservationHistory          ReservationHistory[] @relation("ReservationHistoryUser")
  actionsPerformed            UserActionHistory[]  @relation("UserActionPerformer")
  actionHistory               UserActionHistory[]  @relation("UserActionTarget")
}

model PasswordToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Item {
  id                 String               @id @default(uuid())
  customId           String               @unique
  name               String
  description        String?
  category           ItemType
  serviceCategory    ServiceCategory
  available          Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  author             String?
  isbn               String?
  publisher          String?
  yearPublished      Int?
  serialNumber       String?
  brand              String?
  model              String?
  coverImageUrl      String?
  reservationStatus  ReservationStatus    @default(AVAILABLE)
  reservedById       String?
  reservedAt         DateTime?
  reservedBy         User?                @relation("ItemReservedBy", fields: [reservedById], references: [id])
  loans              Loan[]
  reservations       Reservation[]
  reservationHistory ReservationHistory[]

  @@index([customId])
  @@index([name])
}

model Loan {
  id          String        @id @default(uuid())
  itemId      String?
  borrowerId  String
  borrowedAt  DateTime      @default(now())
  dueAt       DateTime
  returnedAt  DateTime?
  status      LoanStatus    @default(ACTIVE)
  notes       String?
  contexts    LoanContext[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  borrower    User          @relation(fields: [borrowerId], references: [id])
  item        Item?         @relation(fields: [itemId], references: [id])
  LoanHistory LoanHistory[]

  @@index([borrowerId])
  @@index([itemId])
  @@index([status])
}

model ReservationHistory {
  id            String   @id @default(uuid())
  itemId        String
  userId        String
  action        String
  date          DateTime @default(now())
  comment       String?
  performedById String?
  item          Item     @relation(fields: [itemId], references: [id])
  performedBy   User?    @relation("ReservationHistoryPerformer", fields: [performedById], references: [id])
  user          User     @relation("ReservationHistoryUser", fields: [userId], references: [id])

  @@index([userId])
  @@index([performedById])
}

model UserActionHistory {
  id           String   @id @default(uuid())
  targetUserId String?
  action       String
  date         DateTime @default(now())
  performerId  String?
  comment      String?
  performer    User?    @relation("UserActionPerformer", fields: [performerId], references: [id])
  targetUser   User?    @relation("UserActionTarget", fields: [targetUserId], references: [id])
}

model LoanHistory {
  id            String     @id @default(uuid())
  loanId        String
  status        LoanStatus
  date          DateTime   @default(now())
  userId        String?
  comment       String?
  performedById String?
  loan          Loan       @relation(fields: [loanId], references: [id])
  performedBy   User?      @relation("LoanHistoryPerformer", fields: [performedById], references: [id])
  user          User?      @relation("LoanHistoryUser", fields: [userId], references: [id])

  @@index([userId])
  @@index([performedById])
}

model Reservation {
  id        String            @id @default(uuid())
  itemId    String
  userId    String
  startDate DateTime
  endDate   DateTime
  status    ReservationStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  item      Item              @relation(fields: [itemId], references: [id])
  user      User              @relation(fields: [userId], references: [id])

  @@index([itemId])
  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum ItemType {
  BOOK
  EQUIPMENT
}

enum ReservationStatus {
  AVAILABLE
  PENDING
  CONFIRMED
  CANCELLED
  BORROWED
  OUT_OF_ORDER
}

enum ServiceCategory {
  RUNE
  SAVS
  CICAT
  PNT
  LOGEMENT_INCLUSIF
}

enum LoanContext {
  CONFERENCE_FINANCEURS
  APPUIS_SPECIFIQUES
  PLATEFORME_AGEFIPH
  AIDANTS
  RUNE
  PNT
  SAVS
  CICAT
  LOGEMENT_INCLUSIF
}

enum LoanStatus {
  ACTIVE
  OVERDUE
  RETURNED
  OUT_OF_ORDER
  SCHEDULED
}
